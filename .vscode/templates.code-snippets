{
	// Place your Trial-SLAM 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"New .h File": {
		"prefix": "hnew",
		"body": [
			"#pragma once",
			"#ifndef _TRIALSLAM_${1:H_FILE_NAME_UPPER}_H_",
			"#define _TRIALSLAM_${1:H_FILE_NAME_UPPER}_H_",
			"\n#include \"trialSlam/common.h\"\n",
			"TRIAL_SLAM_NAMESPACE_BEGIN\n\n$0\n",
			"TRIAL_SLAM_NAMESPACE_END\n",
			"#endif\n"
		],
		"description": "New .h file."
	},
	"New .cpp File": {
		"prefix": "cppnew",
		"body": [
			"#include \"trialSlam/${1:H_FILE_NAME}.h\"\n",
			"TRIAL_SLAM_NAMESPACE_BEGIN\n\n$0\n",
			"TRIAL_SLAM_NAMESPACE_END\n",
		],
		"description": "New .cpp file."
	},
	"New Class": {
		"prefix": "classnew",
		"body": [
			"class ${1:CLASS_NAME} {",
			"\tpublic:",
			"\t\tEIGEN_MAKE_ALIGNED_OPERATOR_NEW;",
			"\t\ttypedef std::shared_ptr<${1:CLASS_NAME}> Ptr;\n",
			"\t\t${1:CLASS_NAME}() {}\n",
			"\tprivate:",
			"\t\t",
			"};"
		],
		"description": "New class."
	},
	"New Test File": {
		"prefix": "testnew",
		"body": [
			"#include <gtest/gtest.h>\n",
			"#include \"trialSlam/common.h\"\n",
			"TEST(TrialSlamTestSuite, ${1:TEST_NAME}) {\n\t$0\n}\n",
			"int main(int argc, char **argv) {",
			"\t::testing::InitGoogleTest(&argc, argv);",
			"\treturn RUN_ALL_TESTS();",
			"}\n"
		],
		"description": "New gtest .cpp file."
	}
}
